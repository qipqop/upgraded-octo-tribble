from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile

import config
from utils.database import AsyncDatabaseManager
from handlers import texts as UM
from keyboards import reply as RK, inline as IK
from utils.states import UserStatus
from sheet import get_order, get_new_data
import logger

commandRouter = Router()
botLogger = logger.get_logger('bot')
commandRouter.name = 'commandRouter'
dbManager = AsyncDatabaseManager(config.db_config)


@commandRouter.message(Command("start"))
async def welcome(message: Message, state: FSMContext, command: Command = None) -> None:
    await state.set_state(UserStatus.usual)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await dbManager.dbUsers.add_user(user_data={
        'userTgID': message.from_user.id,
        'userChatID': message.chat.id,
        'userTgUsername': message.from_user.username,
    })

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è UTM-–º–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, payload)
    utm_data = {}
    if message.text and " " in message.text:
        command_args = message.text.split(" ", 1)[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ /start
        utm_data = parse_utm(command_args)  # parse_utm - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ UTM –¥–∞–Ω–Ω—ã—Ö

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ UTM-–º–µ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if utm_data:
        botLogger.info(f"–ü–æ–ª—É—á–µ–Ω—ã UTM –¥–∞–Ω–Ω—ã–µ: {utm_data}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è payload –∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    if 'payload' in utm_data:
        payload = utm_data['payload']

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        orders = state_data.get('orders', [])

        # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ payload
        order = next((order for order in orders if order['payload'] == payload), None)

        if order:
            try:
                await message.answer("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É...")
                if order['status'] == "process":
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.update_data(orders=orders)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω
                    token = get_order(name=order['name'], userID=message.chat.id)
                    if token:
                        order['status'] = "paid"
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        await state.update_data(orders=orders)
                        await message.answer(f"<b>üéâ –í–∞—à –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω</b>\n\n{token}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–æ–ø–ª–∞—á–µ–Ω"
                    else:
                        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
                elif order['status'] == "paid":
                    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω
                    await message.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω —Ä–∞–Ω–µ–µ.")
                else:
                    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.")
            except KeyError as e:
                botLogger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º payload.")
            except Exception as e:
                botLogger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º payload.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    welcomeText = UM.welcome.format(
        first_name=message.from_user.first_name if message.from_user.first_name else '',
        last_name=message.from_user.last_name if message.from_user.last_name else '',
    )
    await message.answer(welcomeText, reply_markup=IK.mainMenu)

def parse_utm(command_args: str) -> dict:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ UTM-–º–µ—Ç–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, '/start payload=<payload_value>'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å UTM-–¥–∞–Ω–Ω—ã–º–∏
    """
    utm_data = {}
    args = command_args.split(' ')
    for arg in args:
        if '=' in arg:
            key, value = arg.split('=', 1)
            utm_data[key] = value
    return utm_data



@commandRouter.message(Command("update"))
async def welcome(message: Message, state: FSMContext, command: Command = None) -> None:
    await state.set_state(UserStatus.usual)
    await message.answer('–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...')
    get_new_data()
    await message.answer('–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
